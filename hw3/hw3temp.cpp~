#include<iostream>
using namespace std;
#include<stdio.h>
#include<stdlib.h>
#include <unistd.h>
#include<pthread.h>
#include<signal.h>
#define N  5
#define LEFT  (i+N-1)%N
#define RIGHT (i+1)%N
#define THINKING 0
#define HUNGRY 1
#define EARTING 2
int state[N];
//typedef int samaphore;
int all=0;
pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond_time[N];
pthread_mutex_t s[N];
pthread_t thread[N];

void* philosopher(void* something);//if u dont put this before it will have warning 
void take_forks(int i);//if u dont put this before it will have warning 
void put_forks(int i);//if u dont put this before it will have warning 
void test(int i);//if u dont put this before it will have warning 
void bye(int t);
class monitor
{
public:
	
	void take_forks(int i)
	{
		pthread_mutex_lock(&mutex);
		state[i]=HUNGRY;
		test(i);
		int j;
	
	
		while(state[i]==HUNGRY)
		{	
			cout<<"this is "<<i<<endl;
			for(j=0;j<N;j++)
			{
				if(state[j]==THINKING)
					printf("think  ");
				else if(state[j]==HUNGRY)
					printf("hungry ");
				else if(state[j]==EARTING)
					printf("eating ");
			}
			printf("\n\n@@@@@@@@@@@@@@@@@\n\n");
			pthread_cond_wait(&cond_time[i],&mutex);
		}
		
		pthread_mutex_unlock(&mutex);
		//pthread_mutex_lock(&s[i]);
	}
	void put_forks(int i)
	{
		pthread_mutex_lock(&mutex);
		state[i]=THINKING;
		int j;
		cout<<"this is from"<<i<<endl;
		for(j=0;j<N;j++)
		{
			if(state[j]==THINKING)
				printf("think  ");
			else if(state[j]==HUNGRY)
				printf("hungry ");
			else if(state[j]==EARTING)
				printf("eating ");
		}
		printf("\n\n@@@@@@@@@@@@@@@@@\n\n");
		test(LEFT);

		cout<<"this is from"<<i<<endl;
		for(j=0;j<N;j++)
		{
			if(state[j]==THINKING)
				printf("think  ");
			else if(state[j]==HUNGRY)
				printf("hungry ");
			else if(state[j]==EARTING)
					printf("eating ");
		}
		printf("\n\n@@@@@@@@@@@@@@@@@\n\n");

		test(RIGHT);
		cout<<"this is from "<<i<<endl;	
		for(j=0;j<N;j++)
		{
			if(state[j]==THINKING)
				printf("think  ");
			else if(state[j]==HUNGRY)
				printf("hungry ");
			else if(state[j]==EARTING)
				printf("eating ");
		}
			printf("\n\n@@@@@@@@@@@@@@@@@\n\n");
		pthread_mutex_unlock(&mutex);
	}
	void test(int i)
	{
		if(state[i]==HUNGRY&&state[LEFT]!=EARTING&&state[RIGHT]!=EARTING)
		{
			state[i]=EARTING;
			//pthread_mutex_unlock(&s[i]);
			
			pthread_cond_signal(&cond_time[i]);
		}
	}
};
monitor mo;
int main()
{
	printf("B023040020 hw2 eat spagetti\n");
	long  int j;
	int num[N];
	
	for(j=0;j<N;j++)
	{	
		num[j]=j;
		pthread_create(&thread[j], NULL ,philosopher,(void *)j);	
	}
	signal(SIGINT, bye);
	while(1)
	{	
		sleep(1);
	}
	return 0;
}
void *philosopher(void *something)
{	
	long int i =(long int)something;
	while(all!=1)
	{
		//think();
		//signal(SIGINT, bye);
		mo.take_forks(i);
		//eat();
		sleep(1);
		mo.put_forks(i);	
	}
	printf("%ld goodbye\n",i);
	sleep(1);	
}
void bye(int t)
	{	
		all=1;
		while(1)
		{	
			pthread_mutex_lock(&mutex);
			int j;
			for(j=0;j<N;j++)
			{
				if(state[j]==THINKING)
					printf("think  ");
				else if(state[j]==HUNGRY)
					printf("hungry ");
				else if(state[j]==EARTING)
					printf("eating ");
			}
			printf("\n\n@@@@@@@@@@@@@@@@@\n\n");
			if(state[0]==THINKING&&state[1]==THINKING&&state[2]==THINKING&&state[3]==THINKING&&state[4]==THINKING)
			{				
					break;
			}
	
			pthread_mutex_unlock(&mutex);sleep(1);
		}	
		printf("bye bye and thank u \n");
		exit(0);
	}
